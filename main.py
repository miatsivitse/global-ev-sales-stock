# -*- coding: utf-8 -*-
"""deploy test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-_fvcjdOA3Pf-KBWP23OtUjlcpyWqB1E
"""

import numpy as np
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px

# !pip install dash

import dash
from dash import dcc, html

evcars = pd.read_csv('./data/IEA-EV-dataEV salesHistoricalCars.csv')

projected_evcars = pd.read_csv('./data/IEA-EV-dataEV salesProjection-STEPSCars.csv')

"""### Viz #1 (Replicated) - Share of new cars sold that are battery-electric and plug-in hybrid, 2010 to 2023 (Bar)"""

#I guess we have to use the EV sales Share (percent of ev cars sold) -Dani
filter_data = evcars[(evcars['parameter'] == 'EV sales') |
                               (evcars['parameter']== 'EV sales share')]
filter_data = filter_data[filter_data['powertrain'] != 'FCEV']
filter_data = filter_data[filter_data['region'].isin(['World', 'Norway', 'United Kingdom', 'EU27', 'China', 'USA'])]
filter_data = filter_data[(filter_data['year'] >= 2011) & (filter_data['year'] <= 2023)]
# Split the data into EV sales and EV sales share
ev_sales_data = filter_data[filter_data['parameter'] == 'EV sales'].reset_index(drop=True)
ev_sales_share_data = filter_data[filter_data['parameter'] == 'EV sales share'].reset_index(drop=True)
#merge
merged_data = pd.merge(ev_sales_data, ev_sales_share_data, on=['region', 'year'], suffixes=('_sales', '_share'))
#calculate total ev sales per year, per region by adding value_sales per year per region
total_ev_sales = merged_data.groupby(['year', 'region'])['value_sales'].sum().reset_index()
#now merge total_ev_sales back with merged_data
merged_data = pd.merge(merged_data, total_ev_sales, on=['year', 'region'], suffixes=('', '_total'))
#Calculate BEV and PHEV shares per region per year by: value_sales/value_sales_total * value_share for each powertrain_sales <- this was the equation
merged_data['Sales Share (%)'] = ((merged_data['value_sales'] / merged_data['value_sales_total']) * merged_data['value_share']).round()

# merged_data[(merged_data['year']==2023) & (merged_data['region']=='World')] #example- matches numbers on website graph(China EV sales makes up 18% of all sales there, 12% BEV and 6% PHEV)

bev_data = merged_data[merged_data['powertrain_sales'] == 'BEV']
phev_data = merged_data[merged_data['powertrain_sales'] == 'PHEV']

mia1 = make_subplots(
    rows=2, cols=3,
    subplot_titles=['World', 'Norway', 'United Kingdom', 'EU27', 'China', 'USA'],
    shared_yaxes=True,
    vertical_spacing=0.1
)

powertrain_colors = {'BEV': 'red', 'PHEV': 'blue'}

regions_of_interest = ['World', 'Norway', 'United Kingdom', 'EU27', 'China', 'USA']
for i, region in enumerate(regions_of_interest):
    row = i // 3 + 1
    col = i % 3 + 1

    region_bev_data = bev_data[bev_data['region'] == region]
    region_phev_data = phev_data[phev_data['region'] == region]

    mia1.add_trace(go.Bar(
        x=region_bev_data['year'],
        y=region_bev_data['Sales Share (%)'],
        name='BEV',
        marker=dict(color=powertrain_colors['BEV']),
        showlegend=True if i == 0 else False
    ), row=row, col=col)

    mia1.add_trace(go.Bar(
        x=region_phev_data['year'],
        y=region_phev_data['Sales Share (%)'],
        name='PHEV',
        marker=dict(color=powertrain_colors['PHEV']),
        showlegend=True if i == 0 else False
    ), row=row, col=col)

mia1.update_layout(
    title='Share of new cars sold that are BEV and PHEV, 2011 to 2023',
    barmode='stack',
    height=800,
    showlegend=True,
    legend=dict(
        title='Powertrain',
        x=1.05,
        y=1,
        xanchor='left',
        yanchor='top',
        orientation='v'
    ),
    xaxis_title='Year',
    yaxis_title='Sales Share (%)',
)

mia1.show()

"""### Viz #2 (Replicated) - Share of new electric cars that are fully battery-electric, 2012 to 2023 (Line)"""

#Filter data to 'EV sales', specific regions and years 2012-2023
ev_sales_share_df = evcars[evcars['parameter'] == 'EV sales']

regions_of_interest = ['World', 'Norway', 'United Kingdom', 'China','Sweden']
ev_sales_share_df = ev_sales_share_df[(ev_sales_share_df['region'].isin(regions_of_interest)) &
                                      (ev_sales_share_df['year'].between(2012, 2023))]

ev_sales_aggregated = ev_sales_share_df.groupby(['region', 'year', 'powertrain'], as_index=False)['value'].sum()

#Total sales by region and year (sum of BEV + PHEV + FCEV sales)
total_sales = ev_sales_aggregated.groupby(['region', 'year'])['value'].sum().reset_index()
total_sales = total_sales.rename(columns={'value': 'Total'})

ev_sales_aggregated = pd.merge(ev_sales_aggregated, total_sales, on=['region', 'year'])

#Calculate % of BEV (battery-electric) from total EV sales
ev_sales_aggregated['Percentage'] = (ev_sales_aggregated['value'] / ev_sales_aggregated['Total']) * 100

ev_sales_bv = ev_sales_aggregated[ev_sales_aggregated['powertrain'] == 'BEV']

region_colors = {
    'World': 'purple',
    'Norway': 'red',
    'United Kingdom': 'green',
    'China': 'blue',
    'Sweden': 'gold'
}

mia2 = go.Figure()

for region in regions_of_interest:
    region_data = ev_sales_bv[ev_sales_bv['region'] == region]

    #Add the trace
    mia2.add_trace(go.Scatter(
        x=region_data['year'],
        y=region_data['Percentage'],
        mode='lines',
        name=region,
        line=dict(color=region_colors[region])
    ))

mia2.update_layout(
    title='Share of new electric cars that are fully battery-electric, 2012 to 2023',
    xaxis_title='Year',
    yaxis_title='Percentage of BEV Sales (%)',
    height=600,
    showlegend=True
)

mia2.show()

"""### Viz #3 (New) - EV Stock vs Sales Ratio (Choropleth)"""

evcars_filtered = evcars[(evcars['year'] >= 2010) & (evcars['year'] <= 2023)]
df_sales = evcars_filtered[evcars_filtered['parameter'] == 'EV sales']
df_stock = evcars_filtered[evcars_filtered['parameter'] == 'EV stock']

df_sales_grouped = df_sales.groupby(['region', 'year'])['value'].sum().reset_index()
df_stock_grouped = df_stock.groupby(['region', 'year'])['value'].sum().reset_index()

df_merged = pd.merge(df_sales_grouped, df_stock_grouped, on=['region', 'year'], suffixes=('_sales', '_stock'))

df_merged['EV Stock vs Sales Ratio'] = df_merged['value_stock'] / df_merged['value_sales']

latest_year = 2023 if 2023 in df_merged['year'].values else df_merged['year'].max()
df_latest_year = df_merged[df_merged['year'] == latest_year]

choropleth_data = df_latest_year[['region', 'EV Stock vs Sales Ratio']]

mia3 = px.choropleth(
    choropleth_data,
    locations="region",
    color="EV Stock vs Sales Ratio",
    color_continuous_scale='RdYlGn',
    title=f"EV Stock vs. EV Sales Ratio by Region ({latest_year})",
    locationmode="country names",
    labels={"EV Stock vs Sales Ratio": "Stock/Sales Ratio"},
    template="plotly"
)

mia3.show()

"""### Viz #4 Proportional EV Sales in USA (2011-2023) (Treemap)"""

region_of_interest = ["USA"]

df_filtered = evcars[evcars['region'].isin(region_of_interest)]

mia4 = px.treemap(df_filtered,
                 path=["region", "year"],
                 values="value",
                 title="Proportional EV Sales in USA (2011-2023)",
                 labels={"value": "Number of Vehicles", "region": "Region"},
                 color="value",
                 color_continuous_scale="Blues"
                )

mia4.update_layout(
    title="Proportional EV Sales in USA (2011-2023)",
    height=600,
    width=900
)
mia4.show()

"""## Replicated Visual 1"""

evcars_historical= evcars
evcars.head()

import pandas as pd
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go

# Filter the data for 'EV sales share' category
ev_sales_share_df = evcars_historical[evcars_historical['parameter'] == 'EV sales share']
regions_of_interest = ['World', 'Norway', 'United Kingdom', 'EU27', 'China', 'USA']
ev_sales_share_df = ev_sales_share_df[ev_sales_share_df['region'].isin(regions_of_interest)]
# Aggregate data by summing the EV sales share for each region and year
ev_sales_share_aggregated = ev_sales_share_df.groupby(['region', 'year'], as_index=False)['value'].sum()

y_axis_range = [0, 100]

# Create a subplot layout with 2 rows and 3 columns
Dani1 = make_subplots(
    rows=2, cols=3,
    subplot_titles=regions_of_interest,  # Set titles for each subplot
    shared_yaxes=True,  # Share y-axis across all subplots
)

# Loop through each region to create a line plot and add it to the subplot grid
for i, region in enumerate(regions_of_interest):
    row = i // 3 + 1  # Calculate row number (1 or 2)
    col = i % 3 + 1   # Calculate column number (1, 2, or 3)

    region_data = ev_sales_share_aggregated[ev_sales_share_aggregated['region'] == region]


    trace = go.Scatter(
        x=region_data['year'],
        y=region_data['value'],
        mode='lines',
        name=region
    )


    Dani1.add_trace(trace, row=row, col=col)


Dani1.update_layout(
    title='EV Sales Share (2010-2023) by Region',
    height=800,  # Set the height of the plot
    showlegend=False,  # Hide legend as we have titles for each subplot
)


Dani1.update_yaxes(range=y_axis_range, tickvals=[i for i in range(0, 101, 20)], ticktext=[f'{i}%' for i in range(0, 101, 20)])
Dani1.update_traces(text= ev_sales_share_aggregated['value'].apply(lambda x:"<1%" if x< 1 else f"{x: .0f}%"))
Dani1.show()

"""## Replicated visual 2"""

# Filter the data for 'EV sales share' category and the year 2023
ev_sales_share_2023 = evcars_historical[(evcars_historical['parameter'] == 'EV sales share') & (evcars_historical['year'] == 2023)]

# Further filter for specific regions
regions_of_interest = ['World', 'Norway', 'United Kingdom', 'EU27', 'China', 'USA','Sweden','Germany','India','South Africa']
ev_sales_share_2023 = ev_sales_share_2023[ev_sales_share_2023['region'].isin(regions_of_interest)]

ev_sales_share_2023_aggregated = ev_sales_share_2023.groupby(['region'], as_index=False)['value'].sum()

ev_sales_share_2023_aggregated = ev_sales_share_2023_aggregated.sort_values(by='value', ascending=True)

# Create a horizontal bar graph
Dani2 = px.bar(ev_sales_share_2023_aggregated,
             x='value',
             y='region',
             orientation='h',
             title='EV Sales Share by Region in 2023',
             text='value')
Dani2.update_traces( text= ev_sales_share_2023_aggregated['value'].apply(lambda x:"<1%" if x< 1 else f"{x: .0f}%"),
                  textposition='outside')

# Show the plot
Dani2.show()

"""## **Original 1** EV Stock Share vs. Oil Displacement (Scatter plot of regions)"""

ev_stock_share= evcars_historical[evcars_historical['parameter'] == 'EV stock share']
oil_displacement= evcars_historical[evcars_historical['parameter'] == 'Oil displacement Mbd']

ev_stock_share.head()

merge_data= pd.merge(ev_stock_share, oil_displacement, on=['region','year'], suffixes=('_ev', '_oil'))
merge_data.head()

Dani3= px.scatter(merge_data, x='value_ev', y='value_oil',
                color='region',
                size='value_oil',
                title='EV Stock Share vs Oil Displacement(Mbd)',
                labels={'value_ev':'Ev Stock Share(%)', 'value_oil':'Oil displacement (Mbd)'}
                )

Dani3.show()

"""This graph shows how as EV stock Share increases so does oil displacemenmt meaning less consumption of gasoline and diesel fuels. You can see how the world has a pretty steep slope with oil consumption decreasing fast worldwide, but in countries like China, even with more EV tock share, they still use a lot of oil and fuel.

## **Original 2** Line Graph, Electricity Demand and Oil Displacement over time
"""

#create new dataframe with parameters electricity demand and oil displacement
evcars_historical = pd.read_csv('/content/IEA-EV-dataEV salesHistoricalCars.csv')
electricity = evcars_historical[evcars_historical['parameter'] == 'Electricity demand']
oil_displacement = evcars_historical[evcars_historical['parameter'] == 'Oil displacement Mbd']
#merge the two dataframes by region and year
merged_data = pd.merge(electricity, oil_displacement, on=['region', 'year'])
merged_data.head()

aggregated_data = merged_data.groupby('year')[['value_x', 'value_y']].sum().reset_index()
aggregated_data.rename(columns={'value_x': 'Electricity Demand (GWh)', 'value_y': 'Oil Displacement (Mbd)'}, inplace=True)

Dani4 = go.Figure()

#Electricity Demand trace
Dani4.add_trace(
    go.Scatter(
        x=aggregated_data['year'],
        y=aggregated_data['Electricity Demand (GWh)'],
        name="Electricity Demand (GWh)",
        mode="lines+markers",
        line=dict(color='blue')
    )
)

# Oil Displacement trace
Dani4.add_trace(
    go.Scatter(
        x=aggregated_data['year'],
        y=aggregated_data['Oil Displacement (Mbd)'],
        name="Oil Displacement (Mbd)",
        mode="lines+markers",
        line=dict(color='orange'),
        yaxis="y2" ,
        marker=dict(symbol='triangle-up', size=10) # Changed symbol to 'triangle-up'
    )
)

# layout for dual axes
Dani4.update_layout(
    title="Electricity Demand and Oil Displacement Over Time",
    xaxis_title="Year",
    yaxis=dict(
        title="Electricity Demand (GWh)",
        titlefont=dict(color='blue'),
        tickfont=dict(color='blue'),
    ),
    yaxis2=dict(
        title="Oil Displacement (Mbd)",
        titlefont=dict(color='orange'),
        tickfont=dict(color='orange'),
        overlaying="y",
        side="right",
    ),
    legend=dict(
        x=1.2, y=1.0, xanchor="center", orientation="v"
    ),
    template="plotly"
)

Dani4.show()

"""This graph shows how Electricity Demand is positively correlated to Oil Displacement. This means as Electricity demand goes up, the amount of Oil needed directly goes down as a result.

## DASH APP CODE
"""

app = Dash(__name__)

app.layout = html.Div([
    html.H1("EV Data Dash App", style={'text-align': 'center'}),

    html.Div([
        html.H2("Replicated Graph 1"),
        html.P("This graph shows the percentage of EV sales by region over time. The world is on a steady rise, "
               "but regions like Norway dominate with high percentages, reflecting aggressive EV adoption. "
               "Meanwhile, the USA lags behind compared to the EU and China."),
        dcc.Graph(id='ev-sales-share', figure=Dani1)
    ]),

    html.Div([
        html.H2("Replicated Graph 2"),
        html.P("This horizontal bar chart shows EV sales share across different regions in 2023. Norway leads with "
               "the highest EV adoption, while countries like India and South Africa show relatively low adoption."),
        dcc.Graph(id='ev-sales-2023', figure=Dani2)
    ]),

    html.Div([
        html.H2("Replicated Graph 3"),
        html.P("BEV (battery-electric) vehicles made up a larger percentage of the overall EV sales comapred to PHEV (plug-in hybrids) throughout the reported time period 2010- 2023 for the majority of countries identified in the plot."),
        dcc.Graph(id='ev-sales-share-bev-phev-stacked-bar', figure=mia1)
    ]),

    html.Div([
        html.H2("Replicated Graph 4"),
        html.P("European countries such as Norway, Sweden and the United Kingdom saw a noticeable declines or stagnation in the share of new, fully battery-electric cars sold between 2015 - 2017. Afterwards, the share of these vehciles sold began to increase."
        "In comparison, while China observed a strong share in the sales of fully battery-electric cars sold between 2015 - 2017, the country entered a decline beginning in 2021."),
        dcc.Graph(id='ev-sales-share-bev-line', figure=mia2)
    ]),

    #Section for Jonathans Replicated graphs

    html.Div([
        html.H2("EV Stock Share vs Oil Displacement Among Different Regions"),
        html.P("This scatter plot shows how the EV stock share is correlated with oil displacement. As EV stock share "
               "increases, oil consumption decreases significantly, especially on a global scale. However, countries like "
               "China still consume a substantial amount of oil despite higher EV stock shares."),
        dcc.Graph(id='ev-vs-oil', figure=Dani3)
    ]),

    html.Div([
        html.H2("Electricity Demand and Oil Displacement Over Time"),
          html.P("This graph shows how Electricity Demand is positively correlated to Oil Displacement."
          "This means as Electricity demand goes up, the amount of Oil needed directly goes down as a result. "
               "This showcases a shift toward renewable energy "
               "sources and a reduction in reliance on fossil fuels."),
        dcc.Graph(id='electricity-vs-oil', figure=Dani4)
    ]),

    html.Div([
        html.H2("EV Stock vs. EV Sales Ratio by Region - 2023"),
        html.P("The ratio of EV stock to EV sales for the most recent year (2023) indicates how many EVs a country has on the road in comparison to how many they are selling. For countries like Norway, this shows that they have a lot of EVS on the road already and the market may becoming saturated for EVs. In comparison, a country such as Brazil, India or Australia that has a lower ratio indicates that the country is selling as lot of EVs but does not have many EVs on the road as of the most recent year. These countries could indicate a hot or up-and-coming market for EV sales."),
        dcc.Graph(id='EV-Stock-EV-Sales-Ratio-by-Region', figure=mia3)
    ]),

    html.Div([
        html.H2("Proportional EV Sales in USA (2011-2023)"),
        html.P("Annually, EV sales have grown significantly in the US, making up a more substaintial portion of the market in the 2020's when compared to the 2010's."),
        dcc.Graph(id='ev-sales-USA-2011-2023-treeplot', figure=mia4)
    ])
])
#Sections for Jonathan New Graph

#MACHINE LEARNING sections -sonu

if __name__ == '__main__':
    app.run_server(debug=True, port=8080)